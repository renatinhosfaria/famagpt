apiVersion: apps/v1
kind: Deployment
metadata:
  name: famagpt-orchestrator
  namespace: default
  labels:
    app: famagpt-orchestrator
    component: orchestrator
    version: "1.0.0"
    tier: backend
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: famagpt-orchestrator
  template:
    metadata:
      labels:
        app: famagpt-orchestrator
        component: orchestrator
        version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/api/v1/monitoring/metrics/prometheus"
    spec:
      containers:
      - name: orchestrator
        image: famagpt/orchestrator:latest
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP

        # Environment variables
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: SERVICE_NAME
          value: "orchestrator"
        - name: PORT
          value: "8000"
        - name: LOG_LEVEL
          value: "INFO"

        # Redis configuration
        - name: REDIS_URL
          value: "redis://redis-service:6379"

        # Database configuration
        - name: DATABASE_SERVICE_URL
          value: "http://database-service:8006"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: famagpt-secrets
              key: database-url

        # External API keys
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: famagpt-secrets
              key: openai-api-key
        - name: LANGCHAIN_API_KEY
          valueFrom:
            secretKeyRef:
              name: famagpt-secrets
              key: langchain-api-key
        - name: EVOLUTION_API_KEY
          valueFrom:
            secretKeyRef:
              name: famagpt-secrets
              key: evolution-api-key

        # Rate limiting & cost protection
        - name: RATE_LIMIT_ENABLED
          value: "true"
        - name: RATE_LIMIT_RPM
          value: "100"
        - name: COST_LIMIT_BRL_DAY
          value: "500.0"
        - name: RATE_LIMIT_BURST
          value: "20"

        # OpenTelemetry observability
        - name: OTEL_ENABLED
          value: "true"
        - name: OTEL_SERVICE_NAME
          value: "famagpt-orchestrator"
        - name: OTEL_SERVICE_VERSION
          value: "1.0.0"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://otel-collector:4317"
        - name: OTEL_TRACE_SAMPLE_RATE
          value: "0.1"

        # Auto-scaling configuration
        - name: AUTOSCALING_ENABLED
          value: "true"
        - name: AUTOSCALING_TARGET_CPU
          value: "70"
        - name: AUTOSCALING_TARGET_MEMORY
          value: "80"
        - name: AUTOSCALING_MIN_REPLICAS
          value: "2"
        - name: AUTOSCALING_MAX_REPLICAS
          value: "20"

        # LangSmith configuration
        - name: LANGCHAIN_TRACING_V2
          value: "true"
        - name: LANGCHAIN_PROJECT
          value: "famagpt-production"

        # Resource requests and limits
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi

        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /api/v1/monitoring/health/detailed
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2

        # Startup probe (for slow initialization)
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 12  # Allow up to 60 seconds for startup

        # Volume mounts
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: temp-volume
          mountPath: /app/temp

        # Security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true

      # Volumes
      volumes:
      - name: config-volume
        configMap:
          name: famagpt-config
      - name: temp-volume
        emptyDir: {}

      # Security and scheduling
      securityContext:
        fsGroup: 1000

      # Node selection (optional)
      nodeSelector:
        kubernetes.io/arch: amd64

      # Tolerations for dedicated nodes (optional)
      tolerations:
      - key: "famagpt.ai/dedicated"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

      # Affinity rules
      affinity:
        # Prefer to schedule on different nodes for HA
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - famagpt-orchestrator
              topologyKey: kubernetes.io/hostname

        # Prefer nodes with SSD storage
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            preference:
              matchExpressions:
              - key: node.kubernetes.io/instance-type
                operator: In
                values:
                - m5.large
                - m5.xlarge
                - m5.2xlarge

---

apiVersion: v1
kind: Service
metadata:
  name: orchestrator-service
  namespace: default
  labels:
    app: famagpt-orchestrator
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: famagpt-orchestrator

---

# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: famagpt-orchestrator-hpa
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: famagpt-orchestrator
  minReplicas: 2
  maxReplicas: 20
  metrics:
  # CPU-based scaling
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70

  # Memory-based scaling
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

  # Custom metrics (requires metrics server)
  - type: Pods
    pods:
      metric:
        name: requests_per_minute
      target:
        type: AverageValue
        averageValue: "80"

  - type: Pods
    pods:
      metric:
        name: response_time_p95_ms
      target:
        type: AverageValue
        averageValue: "2000"

  # Scaling behavior
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 300
      - type: Pods
        value: 1
        periodSeconds: 300
      selectPolicy: Min

---

# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: famagpt-orchestrator-pdb
  namespace: default
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: famagpt-orchestrator

---

# Network Policy (optional security)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: famagpt-orchestrator-netpol
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: famagpt-orchestrator
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow traffic from other FamaGPT services
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: famagpt
    ports:
    - protocol: TCP
      port: 8000

  # Allow traffic from ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000

  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53

  # Allow Redis access
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379

  # Allow database service access
  - to:
    - podSelector:
        matchLabels:
          app: famagpt-database
    ports:
    - protocol: TCP
      port: 8006

  # Allow external API access (OpenAI, etc.)
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80