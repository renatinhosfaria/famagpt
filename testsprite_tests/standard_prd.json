{
  "meta": {
    "project": "FamaGPT",
    "date": "2025-09-10",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "FamaGPT is an advanced multi-agent AI system designed for the real estate market in Uberlândia/MG. It offers enterprise-grade, conversational virtual assistance via WhatsApp for clients, brokers, and real estate agencies, combining state-of-the-art AI technologies with domain-specific expertise to enhance property search, analysis, and customer service.",
  "core_goals": [
    "Automate and optimize customer service in real estate with fast, contextually-aware responses.",
    "Achieve high operational efficiency by reducing time on basic consultations by 70%.",
    "Provide advanced AI-driven property search and market analysis tailored to local needs.",
    "Maintain 24/7 availability with high precision intent classification and responsive audio transcription.",
    "Enable generation of qualified leads to boost real estate sales and rentals.",
    "Build a scalable, observable, and secure microservices architecture with seamless WhatsApp integration."
  ],
  "key_features": [
    "Multi-agent AI orchestration with LangGraph for workflow management.",
    "WhatsApp Business API integration for conversational interface.",
    "Accurate audio transcription using OpenAI Whisper.",
    "Automated intelligent property search across multiple real estate portals with web scraping.",
    "Hybrid conversational memory system combining short-term and long-term data storage.",
    "Retrieval-Augmented Generation knowledge base specialized in Uberlândia real estate.",
    "Richly formatted, personalized AI response generation with actionable suggestions.",
    "Real estate domain expert agent for specialized market insights.",
    "Comprehensive admin dashboard for real-time monitoring and management.",
    "Robust rate limiting, idempotent message processing, and secure API access."
  ],
  "user_flow_summary": [
    "User sends a message via WhatsApp which is received by the webhook service.",
    "Message undergoes validation, rate limiting, and is enqueued for processing asynchronously.",
    "Orchestrator coordinates AI agents to classify user intent, extract search criteria, or process audio.",
    "If audio provided, transcription service converts speech to text within performance SLAs.",
    "Specialist agent and RAG module query the knowledge base and perform property searches in portals.",
    "Conversation memory services maintain context and user profile for personalized interaction.",
    "Response is generated with rich formatting and sent back via WhatsApp through the webhook integration.",
    "Administrative users monitor system health, message queues, and analytics through the admin dashboard."
  ],
  "validation_criteria": [
    "System processes 100% of WhatsApp messages with P95 processing time under 4 seconds and error rate below 0.1%.",
    "Intent classification achieves over 85% accuracy with support for defined intent categories and fallback handling.",
    "Property searches return results with over 90% success rate and P95 response times under 3 seconds.",
    "Audio transcription accuracy exceeds 90% with maximum processing time double the audio length for supported formats.",
    "Generated AI responses are contextually accurate, personalized, and delivered within 2 seconds.",
    "The system maintains uptime above 99.9% monthly with auto-scaling and resilience to partial failures.",
    "Rate limiting is enforced at 120 requests per minute per client with idempotent processing guaranteed.",
    "All security measures such as input validation, secure API keys, and HTTPS communication are fully implemented.",
    "Observability metrics including 16+ Prometheus metrics, structured logging, health checks, and alerting are active and actionable.",
    "Business KPIs such as NPS above 80%, lead generation targets, and market coverage are met consistently."
  ],
  "code_summary": {
    "project_name": "FamaGPT",
    "description": "Multi-agent AI system for real estate agents specializing in Uberlândia/MG, featuring microservices architecture with LangGraph orchestration",
    "tech_stack": {
      "backend": {
        "language": "Python",
        "framework": "FastAPI",
        "architecture": "Microservices",
        "orchestration": "LangGraph",
        "ai_frameworks": [
          "LangChain",
          "OpenAI",
          "Whisper"
        ],
        "databases": [
          "PostgreSQL",
          "Redis"
        ],
        "web_scraping": "Playwright",
        "containerization": "Docker",
        "messaging": "WhatsApp Evolution API"
      },
      "infrastructure": {
        "reverse_proxy": "Docker Compose",
        "caching": "Redis",
        "monitoring": "LangSmith",
        "testing": "pytest"
      }
    },
    "services": [
      {
        "name": "orchestrator",
        "port": 8000,
        "description": "LangGraph-based workflow orchestration with LangSmith observability",
        "dependencies": [
          "redis",
          "database"
        ],
        "main_features": [
          "workflow_management",
          "langgraph_integration",
          "agent_coordination"
        ]
      },
      {
        "name": "webhooks",
        "port": 8001,
        "description": "WhatsApp integration via Evolution API",
        "dependencies": [
          "redis",
          "database",
          "orchestrator"
        ],
        "main_features": [
          "whatsapp_integration",
          "webhook_handling",
          "message_processing"
        ]
      },
      {
        "name": "transcription",
        "port": 8002,
        "description": "Whisper-based audio-to-text conversion",
        "dependencies": [
          "redis",
          "database"
        ],
        "main_features": [
          "audio_transcription",
          "whisper_integration",
          "file_processing"
        ]
      },
      {
        "name": "web_search",
        "port": 8003,
        "description": "Playwright-powered property search and scraping",
        "dependencies": [
          "redis",
          "database"
        ],
        "main_features": [
          "web_scraping",
          "property_search",
          "playwright_automation"
        ]
      },
      {
        "name": "memory",
        "port": 8004,
        "description": "Hybrid short/long-term memory system",
        "dependencies": [
          "redis",
          "database"
        ],
        "main_features": [
          "conversation_memory",
          "context_management",
          "memory_persistence"
        ]
      },
      {
        "name": "rag",
        "port": 8005,
        "description": "Retrieval-Augmented Generation pipeline",
        "dependencies": [
          "redis",
          "database"
        ],
        "main_features": [
          "document_retrieval",
          "vector_embeddings",
          "knowledge_base"
        ]
      },
      {
        "name": "database",
        "port": 8006,
        "description": "PostgreSQL integration service",
        "dependencies": [
          "redis"
        ],
        "main_features": [
          "database_management",
          "postgresql_integration",
          "data_persistence"
        ]
      },
      {
        "name": "specialist",
        "port": 8007,
        "description": "Real estate domain expert agent",
        "dependencies": [
          "redis",
          "database",
          "memory",
          "rag",
          "web_search"
        ],
        "main_features": [
          "real_estate_expertise",
          "domain_knowledge",
          "agent_specialization"
        ]
      }
    ],
    "key_features": [
      "Multi-agent AI system",
      "WhatsApp integration",
      "Voice transcription",
      "Property search and scraping",
      "Hybrid memory management",
      "Document RAG system",
      "Real estate specialization",
      "Microservices architecture",
      "LangGraph orchestration",
      "Redis communication"
    ],
    "deployment": {
      "method": "Docker Compose",
      "network": "famagpt_network",
      "volumes": [
        "redis_data",
        "transcription_temp",
        "playwright_browsers",
        "rag_documents"
      ]
    },
    "environment_variables": [
      "OPENAI_API_KEY",
      "LANGCHAIN_API_KEY",
      "EVOLUTION_API_KEY",
      "DATABASE_URL",
      "WEBHOOK_SECRET"
    ],
    "test_scope": "backend",
    "main_endpoints": {
      "health_checks": [
        "http://localhost:8000/health",
        "http://localhost:8001/health",
        "http://localhost:8002/health",
        "http://localhost:8003/health",
        "http://localhost:8004/health",
        "http://localhost:8005/health",
        "http://localhost:8006/health",
        "http://localhost:8007/health"
      ],
      "api_prefix": "/api/v1"
    }
  }
}
