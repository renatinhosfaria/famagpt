[
  {
    "projectId": "91ec203f-9f1c-428d-98e8-0961b4575724",
    "testId": "b2803593-0fbf-493c-844d-7a0789f259f0",
    "userId": "54d82498-d011-7006-ba19-ee644d408cce",
    "title": "TC001-verify health endpoint of orchestrator service",
    "description": "Test the /health endpoint of the orchestrator service to ensure it returns a successful status indicating the LangGraph workflow orchestration and agent coordination are operational.",
    "code": "import requests\n\ndef test_verify_health_endpoint_of_orchestrator_service():\n    url = \"http://localhost:8000/health\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=30)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Request to orchestrator health endpoint failed: {e}\"\n\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    # Check status code is 200\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n\n    # Validate 'status' field\n    status = data.get(\"status\", \"\").lower()\n    assert status in [\"ok\", \"healthy\", \"success\"], f\"Unexpected status value: {status}\"\n\ntest_verify_health_endpoint_of_orchestrator_service()\n",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-10T18:16:09.641Z",
    "modified": "2025-09-10T18:16:32.068Z"
  },
  {
    "projectId": "91ec203f-9f1c-428d-98e8-0961b4575724",
    "testId": "f907f15d-22ee-4e70-a170-7c58090d6921",
    "userId": "54d82498-d011-7006-ba19-ee644d408cce",
    "title": "TC002-verify health endpoint of webhooks service",
    "description": "Test the /health endpoint of the webhooks service to confirm WhatsApp integration and webhook message processing are functioning correctly.",
    "code": "import requests\n\ndef test_tc002_verify_health_endpoint_webhooks_service():\n    base_url = \"http://localhost:8000\"\n    health_url = f\"http://localhost:8001/health\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(health_url, headers=headers, timeout=30)\n        response.raise_for_status()\n        data = response.json()\n        # Validate response structure and key indicators of health\n        assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n        assert isinstance(data, dict), \"Response is not a JSON object\"\n        # Check expected keys or values if any exist that indicate WhatsApp integration and webhook processing health\n        # Common health check pattern: \"status\": \"ok\" or similar\n        assert \"status\" in data, \"Missing 'status' key in health response\"\n        assert data[\"status\"].lower() in [\"ok\", \"healthy\", \"healthy\"], f\"Unexpected status: {data['status']}\"\n        # Additional specific checks could be added here if API returns details on whatsapp_integration or message_processing\n    except requests.exceptions.RequestException as e:\n        assert False, f\"HTTP request to {health_url} failed: {e}\"\n\ntest_tc002_verify_health_endpoint_webhooks_service()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-10T18:16:09.648Z",
    "modified": "2025-09-10T18:16:22.935Z"
  },
  {
    "projectId": "91ec203f-9f1c-428d-98e8-0961b4575724",
    "testId": "4708766c-c263-466d-86b3-a7325e279d3d",
    "userId": "54d82498-d011-7006-ba19-ee644d408cce",
    "title": "TC003-verify health endpoint of transcription service",
    "description": "Test the /health endpoint of the transcription service to validate the Whisper-based audio transcription functionality and file processing are working as expected.",
    "code": "import requests\n\ndef test_tc003_verify_health_endpoint_transcription_service():\n    base_url = \"http://localhost:8002\"\n    health_url = f\"{base_url}/health\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(health_url, headers=headers, timeout=30)\n        response.raise_for_status()\n        data = response.json()\n        \n        # Assert HTTP status code is 200\n        assert response.status_code == 200\n        \n        # Validate expected keys in health response, assuming typical health check JSON structure\n        # For transcription service, checking that relevant keys exist and are True or \"ok\"\n        # Since PRD does not define exact schema for health response, we assume standard keys\n        \n        # Common checks could be \"status\" == \"ok\" or \"service\" == \"transcription\"\n        # and checks that transcription and file_processing subsystems are healthy\n        assert \"status\" in data\n        assert data[\"status\"].lower() in (\"ok\", \"healthy\", \"success\")\n        \n        # Additional keys based on core features (best guess)\n        # e.g., \"audio_transcription\" and \"file_processing\" keys might be bool or string status\n        if \"audio_transcription\" in data:\n            assert str(data[\"audio_transcription\"]).lower() in (\"ok\", \"healthy\", \"true\", \"running\", \"success\")\n        if \"file_processing\" in data:\n            assert str(data[\"file_processing\"]).lower() in (\"ok\", \"healthy\", \"true\", \"running\", \"success\")\n            \n    except requests.Timeout:\n        assert False, \"Request to transcription service health endpoint timed out.\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n    except ValueError:\n        assert False, \"Response is not valid JSON.\"\n\ntest_tc003_verify_health_endpoint_transcription_service()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-10T18:16:09.654Z",
    "modified": "2025-09-10T18:16:25.272Z"
  },
  {
    "projectId": "91ec203f-9f1c-428d-98e8-0961b4575724",
    "testId": "485e6542-c2f4-4aa6-90b6-220efacd0f8d",
    "userId": "54d82498-d011-7006-ba19-ee644d408cce",
    "title": "TC004-verify health endpoint of web search service",
    "description": "Test the /health endpoint of the web search service to ensure Playwright-powered property search and web scraping features are operational.",
    "code": "import requests\n\ndef test_verify_health_endpoint_web_search_service():\n    base_url = \"http://localhost:8003\"\n    health_url = f\"{base_url}/health\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(health_url, headers=headers, timeout=30)\n        response.raise_for_status()\n        json_response = response.json()\n        # Validate expected keys and values indicating Playwright and scraping are operational\n        assert isinstance(json_response, dict), \"Response is not a JSON object\"\n        # Typical health checks often include 'status' or similar keys\n        assert \"status\" in json_response, \"'status' key missing in health response\"\n        assert json_response[\"status\"].lower() == \"ok\" or json_response[\"status\"].lower() == \"healthy\", \"Health status not OK\"\n        # Additional checks could be included if schema was specified\n    except requests.RequestException as e:\n        assert False, f\"Request to web search health endpoint failed: {e}\"\n\ntest_verify_health_endpoint_web_search_service()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-10T18:16:09.661Z",
    "modified": "2025-09-10T18:16:23.446Z"
  },
  {
    "projectId": "91ec203f-9f1c-428d-98e8-0961b4575724",
    "testId": "7e798c08-3e02-4f69-bff2-10961920cf3f",
    "userId": "54d82498-d011-7006-ba19-ee644d408cce",
    "title": "TC005-verify health endpoint of memory service",
    "description": "Test the /health endpoint of the memory service to confirm the hybrid short-term and long-term conversation memory management is functioning properly.",
    "code": "import requests\n\ndef test_TC005_verify_health_endpoint_of_memory_service():\n    base_url = \"http://localhost:8004\"\n    url = f\"{base_url}/health\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    timeout = 30\n    try:\n        response = requests.get(url, headers=headers, timeout=timeout)\n    except requests.RequestException as e:\n        assert False, f\"Request to memory service /health endpoint failed: {e}\"\n    assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code}\"\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n    # Validate likely expected keys and values in health check\n    # Assuming typical health structure might include: status, uptime, memory_usage, etc.\n    assert \"status\" in data, \"'status' key missing in health response\"\n    assert data[\"status\"] in [\"ok\", \"healthy\", \"success\"], f\"Unexpected health status value: {data['status']}\"\n    # Optionally check presence of metrics\n    # Since no exact schema provided, just check keys that might exist\n    expected_keys = [\"status\", \"uptime\", \"memory\"]\n    found_keys = any(key in data for key in expected_keys)\n    assert found_keys, \"Health response missing expected health metric keys\"\n    \ntest_TC005_verify_health_endpoint_of_memory_service()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-10T18:16:09.667Z",
    "modified": "2025-09-10T18:16:25.891Z"
  },
  {
    "projectId": "91ec203f-9f1c-428d-98e8-0961b4575724",
    "testId": "b31b4d68-aeef-40d1-9cff-8abf5377a17c",
    "userId": "54d82498-d011-7006-ba19-ee644d408cce",
    "title": "TC006-verify health endpoint of rag service",
    "description": "Test the /health endpoint of the rag service to validate the retrieval-augmented generation pipeline, document retrieval, and vector embedding functionalities.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8005\"\nTIMEOUT = 30\nHEALTH_ENDPOINT = \"/health\"\nHEADERS = {\n    \"Accept\": \"application/json\"\n}\n\ndef test_verify_health_endpoint_of_rag_service():\n    url = f\"{BASE_URL}{HEALTH_ENDPOINT}\"\n    try:\n        response = requests.get(url, headers=HEADERS, timeout=TIMEOUT)\n        response.raise_for_status()\n        data = response.json()\n\n        # Assert response structure and status presence\n        assert isinstance(data, dict), \"Response should be a JSON object\"\n        assert \"status\" in data, \"Response missing 'status' key\"\n        assert data[\"status\"] in [\"ok\", \"healthy\"], \"'status' should be 'ok' or 'healthy'\"\n\n    except requests.exceptions.Timeout:\n        assert False, \"Request timed out\"\n    except requests.exceptions.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n\ntest_verify_health_endpoint_of_rag_service()\n",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-10T18:16:09.674Z",
    "modified": "2025-09-10T18:16:43.690Z"
  },
  {
    "projectId": "91ec203f-9f1c-428d-98e8-0961b4575724",
    "testId": "63a8d8ed-3326-4eae-b386-2a16fdb51a31",
    "userId": "54d82498-d011-7006-ba19-ee644d408cce",
    "title": "TC007-verify health endpoint of database service",
    "description": "Test the /health endpoint of the database service to ensure PostgreSQL integration and data persistence are working correctly.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8006\"\nTIMEOUT = 30\n\ndef test_tc007_verify_health_endpoint_database_service():\n    url = f\"{BASE_URL}/health\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n        data = response.json()\n\n        # Basic assertions for a health endpoint of a database service\n        assert isinstance(data, dict), \"Response is not a JSON object\"\n        # Adjusted expected keys according to actual response\n        expected_keys = [\"status\", \"database\", \"uptime\"]\n        for key in expected_keys:\n            assert key in data, f\"Missing key '{key}' in health response\"\n\n        assert data[\"status\"] == \"ok\", \"Status is not ok\"\n        assert data[\"database\"] == \"connected\", \"Database is not connected\"\n        assert isinstance(data[\"uptime\"], (int, float)) and data[\"uptime\"] > 0, \"Invalid uptime value\"\n\n    except requests.exceptions.RequestException as e:\n        assert False, f\"HTTP request failed: {e}\"\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n\ntest_tc007_verify_health_endpoint_database_service()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 33, in <module>\n  File \"<string>\", line 21, in test_tc007_verify_health_endpoint_database_service\nAssertionError: Missing key 'uptime' in health response\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-10T18:16:09.685Z",
    "modified": "2025-09-10T18:16:38.556Z"
  },
  {
    "projectId": "91ec203f-9f1c-428d-98e8-0961b4575724",
    "testId": "791c5e23-f887-44e9-9d32-c3f9950f98c0",
    "userId": "54d82498-d011-7006-ba19-ee644d408cce",
    "title": "TC008-verify health endpoint of specialist service",
    "description": "Test the /health endpoint of the specialist service to confirm the real estate domain expert agent and its dependencies are operational.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8007\"\nTIMEOUT = 30\n\ndef test_tc008_verify_health_endpoint_of_specialist_service():\n    url = f\"{BASE_URL}/health\"\n    try:\n        response = requests.get(url, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n        data = response.json()\n        # Basic checks that indicate service and dependencies are operational\n        assert \"status\" in data, \"Response JSON missing 'status' key\"\n        assert data[\"status\"].lower() in (\"ok\", \"healthy\", \"healthy_services\"), f\"Unexpected health status: {data['status']}\"\n        # Optionally, if details about dependencies are returned, check them\n        if \"dependencies\" in data:\n            assert isinstance(data[\"dependencies\"], dict), \"'dependencies' should be a dictionary\"\n            for dep, state in data[\"dependencies\"].items():\n                assert state.lower() in (\"ok\", \"healthy\", \"up\"), f\"Dependency {dep} unhealthy: {state}\"\n    except requests.RequestException as e:\n        assert False, f\"Request to health endpoint failed: {e}\"\n\ntest_tc008_verify_health_endpoint_of_specialist_service()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 10, in test_tc008_verify_health_endpoint_of_specialist_service\nAssertionError: Expected status code 200, got 500\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-10T18:16:09.696Z",
    "modified": "2025-09-10T18:16:28.689Z"
  }
]
